# name: Deploy to Salesforce

# on:
#   push:
#     branches: [main]
#     paths:
#       - "force-app/**"

# jobs:
#   deploy-to-salesforce:
#     runs-on: ubuntu-latest
#     if: ${{ github.actor != 'dependabot[bot]' }}
#     steps:
#       - name: "Checkout source code"
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: "Cache SFDX CLI packages"
#         id: cache-sfdx
#         uses: actions/cache@v3
#         env:
#           cache-name: cache-sfdx-cli-modules
#         with:
#           path: ~/sf
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/sfdx-project.json') }}

#       - name: "Install Salesforce CLI"
#         if: ${{ steps.cache-sfdx.outputs.cache-hit != 'true' }}
#         run: |
#           wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
#           mkdir -p ~/sf
#           tar xJf sf-linux-x64.tar.xz -C ~/sf --strip-components 1
#           echo "$HOME/sf/bin" >> $GITHUB_PATH
#           ~/sf/bin/sf version

#       - name: "Update SFDX"
#         if: ${{ steps.cache-sfdx.outputs.cache-hit == 'true' }}
#         run: |
#           echo "$HOME/sf/bin" >> $GITHUB_PATH
#           ~/sf/bin/sf version

#       - name: "Installing sfdx git delta"
#         run: |
#           echo y | sf plugins:install sfdx-git-delta
#           sf plugins

#       - name: "Populate auth file with SFDX_URL secret"
#         run: |
#           echo ${{ secrets.SFDX_INTEGRATION_URL }} > ./SFDX_INTEGRATION_URL.txt

#       - name: "Authenticate to Salesforce Org"
#         run: sf org login sfdx-url -f ./SFDX_INTEGRATION_URL.txt -s -a integration

#       - name: "Create delta packages for new, modified or deleted metadata"
#         run: |
#           mkdir changed-sources
#           sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

#       - name: "Deploy Delta Changes to Salesforce"
#         run: |
#           echo "Deploying changes to Salesforce..."
#           if [ -f changed-sources/package/package.xml ]; then
#             echo "Found changes to deploy"
#             # Remove --dry-run flag for actual deployment
#             sf project deploy start -x changed-sources/package/package.xml \
#               --post-destructive-changes changed-sources/destructiveChanges/destructiveChanges.xml \
#               --test-level RunLocalTests \
#               --wait 30 \
#               --json
#           else
#             echo "No changes to deploy"
#           fi

#       - name: "Deploy Status Check"
#         run: |
#           echo "Checking deployment status..."
#           sf project deploy report --json

#       - name: "Clean up auth file"
#         if: always()
#         run: |
#           rm -f ./SFDX_INTEGRATION_URL.txt

name: Deploy to Salesforce

on:
  push:
    branches: [main]
    paths:
      - "force-app/**"

jobs:
  deploy-to-salesforce:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Cache SFDX CLI packages"
        id: cache-sfdx
        uses: actions/cache@v3
        env:
          cache-name: cache-sfdx-cli-modules
        with:
          path: ~/sf
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/sfdx-project.json') }}

      - name: "Install Salesforce CLI"
        if: ${{ steps.cache-sfdx.outputs.cache-hit != 'true' }}
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir -p ~/sf
          tar xJf sf-linux-x64.tar.xz -C ~/sf --strip-components 1
          echo "$HOME/sf/bin" >> $GITHUB_PATH
          ~/sf/bin/sf version

      - name: "Update SFDX"
        if: ${{ steps.cache-sfdx.outputs.cache-hit == 'true' }}
        run: |
          echo "$HOME/sf/bin" >> $GITHUB_PATH
          ~/sf/bin/sf version

      - name: "Installing sfdx git delta"
        run: |
          echo y | sf plugins:install sfdx-git-delta
          sf plugins

      - name: "Populate auth file with SFDX_URL secret"
        run: |
          echo ${{ secrets.SFDX_INTEGRATION_URL }} > ./SFDX_INTEGRATION_URL.txt

      - name: "Authenticate to Salesforce Org"
        run: |
          sf org login sfdx-url -f ./SFDX_INTEGRATION_URL.txt -s -a integration
          # Verify authentication and show org info
          sf org display --json

      - name: "Create delta packages for new, modified or deleted metadata"
        run: |
          mkdir changed-sources
          echo "Comparing HEAD to HEAD^ for changes..."
          sf sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
          
          echo "=== Delta Generation Results ==="
          if [ -f changed-sources/package/package.xml ]; then
            echo "✅ Package.xml generated successfully"
            echo "Changes detected:"
            cat changed-sources/package/package.xml
          else
            echo "⚠️ No package.xml generated - no changes detected"
            echo "Checking what files changed:"
            git diff --name-only HEAD^ HEAD
          fi

      - name: "Deploy Delta Changes to Salesforce"
        run: |
          echo "Starting deployment to Salesforce..."
          if [ -f changed-sources/package/package.xml ]; then
            echo "Found changes to deploy"
            
            # Check if destructive changes exist
            DESTRUCTIVE_CHANGES=""
            if [ -f changed-sources/destructiveChanges/destructiveChanges.xml ]; then
              DESTRUCTIVE_CHANGES="--post-destructive-changes changed-sources/destructiveChanges/destructiveChanges.xml"
              echo "Found destructive changes to apply"
            fi
            
            # Deploy with proper error handling
            sf project deploy start \
              -x changed-sources/package/package.xml \
              $DESTRUCTIVE_CHANGES \
              --test-level NoTestRun \
              --wait 30 \
              --json || {
                echo "❌ Deployment failed"
                sf project deploy report --json
                exit 1
              }
            
            echo "✅ Deployment completed successfully"
          else
            echo "No changes to deploy - package.xml not found"
            exit 0
          fi

      - name: "Deploy Status Check"
        run: |
          echo "Checking final deployment status..."
          sf project deploy report --json
          echo "✅ Deployment status check completed"

      - name: "Clean up auth file"
        if: always()
        run: |
          rm -f ./SFDX_INTEGRATION_URL.txt